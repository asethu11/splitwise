// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  memberships Membership[]
  expenses    Expense[]
  expenseSplits ExpenseSplit[]
  settlementsFrom Settlement[] @relation("SettlementFrom")
  settlementsTo   Settlement[] @relation("SettlementTo")

  @@map("users")
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  inviteCode  String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  memberships Membership[]
  expenses    Expense[]
  settlements Settlement[]

  @@map("groups")
}

model Membership {
  id      String @id @default(cuid())
  userId  String
  groupId String
  role    String @default("member") // admin, member
  joinedAt DateTime @default(now())

  // Relationships
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("memberships")
}

model Expense {
  id          String   @id @default(cuid())
  title       String
  amount      Float
  currency    String   @default("USD")
  date        DateTime
  notes       String?
  paidById    String
  groupId     String
  splitType   String   // equal, percentage, fixed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  paidBy      User           @relation(fields: [paidById], references: [id], onDelete: Cascade)
  group       Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  expenseSplits ExpenseSplit[]

  @@map("expenses")
}

model ExpenseSplit {
  id        String @id @default(cuid())
  expenseId String
  userId    String
  amount    Float
  percentage Float?
  isPaid    Boolean @default(false)

  // Relationships
  expense Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([expenseId, userId])
  @@map("expense_splits")
}

model Settlement {
  id        String   @id @default(cuid())
  fromUserId String
  toUserId   String
  groupId    String
  amount     Float
  currency   String   @default("USD")
  date       DateTime
  notes      String?
  createdAt  DateTime @default(now())

  // Relationships
  fromUser User  @relation("SettlementFrom", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser   User  @relation("SettlementTo", fields: [toUserId], references: [id], onDelete: Cascade)
  group    Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("settlements")
}
